# the graph class
gremlin.graph=com.tinkerpop.gremlin.hadoop.structure.HadoopGraph
# i/o formats for graphs and memory (i.e. computer result)
gremlin.hadoop.graphInputFormat=com.tinkerpop.gremlin.hadoop.structure.io.graphson.GraphSONInputFormat
gremlin.hadoop.graphOutputFormat=com.tinkerpop.gremlin.hadoop.structure.io.graphson.GraphSONOutputFormat
gremlin.hadoop.memoryOutputFormat=org.apache.hadoop.mapreduce.lib.output.TextOutputFormat
# i/o locations
gremlin.hadoop.inputLocation=tinkerpop-modern-vertices.ldjson
gremlin.hadoop.outputLocation=output
# deriving a complete view of the memory requires an extra mapreduce job and thus, if not needed, should be avoided
gremlin.hadoop.deriveMemory=false
# if the job jars are not on the classpath of every hadoop node, then they must be provided to the distributed cache at runtime
gremlin.hadoop.jarsInDistributedCache=true
# the vertex program to execute
gremlin.vertexProgram=com.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram

# It is possible to provide Giraph configuration parameters for use with GiraphGraphComputer
############################################################################################
giraph.minWorkers=2
giraph.maxWorkers=2
# giraph.useInputSplitLocality=false
# giraph.logLevel=debug

# It is possible to provide Hadoop configuration parameters.
# Note that these parameters are provided to each MapReduce job within the entire Hadoop-Gremlin job pipeline.
# Some of these parameters may be over written by Hadoop-Gremlin as deemed necessary.
##############################################################################################################
# mapred.linerecordreader.maxlength=5242880
# mapred.map.child.java.opts=-Xmx1024m -Dtinkerpop.profiling=true
# mapred.reduce.child.java.opts=-Xmx1024m -Dtinkerpop.profiling=true
# mapred.map.tasks=6
# mapred.reduce.tasks=3
# mapred.job.reuse.jvm.num.tasks=-1
# mapred.task.timeout=5400000
# mapred.reduce.parallel.copies=50
# io.sort.factor=100
# io.sort.mb=200



